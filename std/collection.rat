class Counter {
    def new(self, arr) {
        self.arr = arr
        self.count = {}
        for item in arr {
            if item in self.count.keys() {
                self.count[item] += 1
            } else {
                self.count[item] = 1
            }
        }
    }

    def percentages(self) {
        // Return a dictionary of the form {item: percentage}
        // for each item in the array.
        let percentages = {}
        for item in self.count.keys() {
            percentages[item] = (self.count[item] / self.arr.len()) * 100
        }
        return percentages
    }

    def most_common(self) {
        // Return the most common item in the array.
        // If there is a tie, the first item is returned.
        let items = self.all_most_common()
        if items[0].len() > 0 {
            return (items[0][0], items[1])
        }
        return nothing
    }

    def all_most_common(self) {
        // Return a list of all the most common items
        // in the array. If there is a tie, all items
        // are returned.
        let max = 0
        let max_items = []
        for item in self.count.keys() {
            if self.count[item] > max {
                max = self.count[item]
                max_items = [item]
            } else if self.count[item] == max {
                max_items.push(item)
            }
        }
        return (max_items, max)
    }

    def least_common(self) {
        // Return the least common item in the array.
        // If there is a tie, the first item is returned.
        let items = self.all_least_common()
        if items[0].len() > 0 {
            return (items[0][0], items[1])
        }
        return nothing
    }

    def all_least_common(self) {
        // Return a list of all the least common items
        // in the array. If there is a tie, all items
        // are returned.
        let min = nothing
        let min_items = []
        for item in self.count.keys() {
            if min == nothing {
                min = self.count[item]
                min_items = [item]
            } else if self.count[item] < min {
                min = self.count[item]
                min_items = [item]
            } else if self.count[item] == min {
                min_items.push(item)
            }
        }
        return (min_items, min)
    }

    def count_item(self, item) {
        // Return the count of the given item in the array.
        return self.count.get(item, 0)
    }

    def items(self) {
        // Return a list of tuples of the form (item, count)
        // for each item in the array.
        let items = []
        for item in self.count.keys() {
            items.push((item, self.count[item]))
        }
        return items
    }
}

class OrderedDict {
    def new(self) {
        // Create a new ordered dictionary.
        self.keys = []
        self.dict = {}
    }

    def push(self, key, value) {
        self.dict[key] = value
        self.keys.push(key)
    }

    def get(self, key, default=nothing) {
        return self.dict.get(key, default)
    }

    def items(self) {
        let items = []
        for key in self.keys {
            items.push((key, self.dict[key]))
        }
        return items
    }
}

class LinkedList {
    static class Node {
        def new(self, val, next=nothing) {
            self.next = next
            self.val = val
        }
    }

    def new(self) {
        self.head = nothing
        self.len = 0
    }

    def get(self, idx) {
        if idx > self.len or 0 > idx {
            print(`Index '{idx}' out of bounds`)
            exit(1)
        }
        let cur = self.head
        let i = 0
        while i != idx {
            cur = cur.next
            i++
        }
        return cur
    }

    def push(self, val) {
        if self.head == nothing {
            self.head = Node(val)
        } else {
            let cur = self.head
            self.head = self.Node(val, next:cur)
        }
        self.len++
    }

    def push_many(self, *vals) {
        for val in vals {
            self.push(val)
        }
    }

    def push_at(self, idx, val) {
        if idx == 0 {
            self.push(val)
            return nothing
        }
        if idx > self.len or 0 > idx {
            print(`Index '{idx}' out of bounds`)
            exit(1)
        }
        let node = self.get(idx-1)
        let cur = node.next
        node.next = self.Node(val, next:cur)
        self.len++
    }

    def pop(self) {
        if self.len == 0 {
            print("Cannot pop on an empty linked list.")
            exit(1)
        }
        self.head = self.head.next
        self.len--
        return self.head
    }

    def pop_at(self, idx) {
        if idx == 0 {
            return self.pop()
        }
        if idx > self.len or 0 > idx {
            print(`Index '{idx}' out of bounds`)
            exit(1)
        }
        let node = self.get(idx-1)
        let popped = node.next
        node.next = popped.next
        self.len--
        return popped
    }

    def print(self) {
        let out = "Linked list: "
        let cur = self.head
        while cur != nothing {
            out += repr(cur.val)
            if cur.next != nothing {
                out += " -> "
            }
            cur = cur.next
        }
        print(out)
    }
}
