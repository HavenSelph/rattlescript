use crate::token::Location;
use std::rc::Rc;

#[derive(Debug)]
pub enum Ast {
    And(Location, Rc<Ast>, Rc<Ast>),
    Assert(Location, Rc<Ast>),
    Assignment(Location, Rc<Ast>, Rc<Ast>),
    Block(Location, Vec<Rc<Ast>>),
    BooleanLiteral(Location, bool),
    Call(Location, Rc<Ast>, Vec<Rc<Ast>>),
    Divide(Location, Rc<Ast>, Rc<Ast>),
    FloatLiteral(Location, f64),
    Function {
        loc: Location,
        name: Option<String>,
        args: Vec<String>,
        body: Rc<Ast>,
    },
    If(Location, Rc<Ast>, Rc<Ast>, Option<Rc<Ast>>),
    Index(Location, Rc<Ast>, Rc<Ast>),
    IntegerLiteral(Location, i64),
    Minus(Location, Rc<Ast>, Rc<Ast>),
    Multiply(Location, Rc<Ast>, Rc<Ast>),
    Not(Location, Rc<Ast>),
    Nothing(Location),
    Or(Location, Rc<Ast>, Rc<Ast>),
    Plus(Location, Rc<Ast>, Rc<Ast>),
    Return(Location, Rc<Ast>),
    Slice {
        loc: Location,
        lhs: Rc<Ast>,
        start: Option<Rc<Ast>>,
        end: Option<Rc<Ast>>,
        step: Option<Rc<Ast>>,
    },
    StringLiteral(Location, String),
    VarDeclaration(Location, String, Rc<Ast>),
    Variable(Location, String),
    Equals(Location, Rc<Ast>, Rc<Ast>),
    NotEquals(Location, Rc<Ast>, Rc<Ast>),
    LessThan(Location, Rc<Ast>, Rc<Ast>),
    GreaterThan(Location, Rc<Ast>, Rc<Ast>),
    LessThanEquals(Location, Rc<Ast>, Rc<Ast>),
    GreaterThanEquals(Location, Rc<Ast>, Rc<Ast>),
    While(Location, Rc<Ast>, Rc<Ast>),
    Continue(Location),
    Break(Location),
    For(Location, String, Rc<Ast>, Rc<Ast>),
    Range(Location, Rc<Ast>, Rc<Ast>),
}
